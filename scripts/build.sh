#!/bin/bash

#########################################################
# Runs bitbake for all the supported machines in meta-xilinx layer
########################################################

SCRIPT=$(basename "$0")
SCRIPTDIR=$(dirname $(readlink -f "$0"))
BUILDDIR=""
SOURCEDIR=""
MACHINES=""
YOCTOBRANCH=""

function get_all_machines()
{
    find "$1"/meta-xilinx -path "*/conf/machine/*.conf" -exec basename -s .conf {} \;
}

function build_machines()
{
    TARGETS=""
    METAPATHS=""

    [ -n "$MACHINES" ] || MACHINES=$(get_all_machines "$SOURCEDIR")
    [ -n "$TARGETS" ]  || TARGETS="core-image-minimal"
    [ -n "$METAPATHS" ] || METAPATHS=$(find "$SOURCEDIR" -path "*/conf/layer.conf")

    source "$SOURCEDIR/oe-init-build-env" "$BUILDDIR" > /dev/null

    if [ $? -ne 0 ]; then
        echo "failed"
        return
    fi

    # add meta-xilinx path to bblayer.conf file
    for METAPATH in ${METAPATHS}; do
        metaloc=${METAPATH%/conf/layer.conf}
        result=$(grep -o "$metaloc" "$BUILDDIR/conf/bblayers.conf")
    [ -n "$result" ] || cat >> "$BUILDDIR/conf/bblayers.conf" <<EOF
# Generated by $SCRIPT, do not modify
BBLAYERS += "$metaloc"
EOF
    done

    # include override.conf from local.conf
    result=$(grep -x "include conf/override.conf" "$BUILDDIR/conf/local.conf")
    [ -n "$result" ] || cat >> "$BUILDDIR/conf/local.conf" <<EOF
# Generated by $SCRIPT, do not modify
include conf/override.conf
EOF

if [ ! -f "$BUILDDIR/conf/override.conf" ]; then
    # generate override.conf
    cat > "$BUILDDIR/conf/override.conf" <<EOF
# Generated by $SCRIPT, do not modify
SSTATE_DIR = "$SCRIPTDIR/sstate-cache"
DL_DIR = "$SCRIPTDIR/downloads"
PACKAGE_CLASSES = "package_rpm"
INHERIT += "rm_work"
EOF
fi

    for MACHINE in ${MACHINES}; do
        echo -ne " Building $MACHINE... "

        # execute bitbake command
        (
        echo -e "command:\n\t MACHINE="$MACHINE" bitbake $TARGETS\n\n"
        MACHINE="$MACHINE" time bitbake $TARGETS
        ) > $MACHINE.log 2>&1

        if [ $? -eq 0 ]; then
            echo "done"
        else
            echo "failed"
        fi
    done
}

function show_help()
{
echo 'YOCTO meta-xilinx build script'
echo 'Usage: compile [options]'
echo '    -h | --help     Display usage help (this text) and exit'
echo '    -m | --machines List of machines to build, default is all machines'
echo '    -b | --branches List of Yocto branches to fetch, default is all suppported branches'
echo '    --sourcedir     Location where all the source files are present, \
                          default is script_dir/yocto_branch/sources'
}

TEMP=`getopt -o hm:b: --long help,machines:,branches:,sourcedir: -- "$@"`

if [ $? != 0 ] ; then show_help >&2 ; exit 0 ; fi

eval set -- "$TEMP"

while [ $# -gt 0 ]; do
    case "$1" in
        -h | --help ) show_help; exit 0 ;;
        -m | --machines ) MACHINES="$2 $MACHINES"; shift 2 ;;
        -b | --branches ) YOCTOBRANCH="$2 $YOCTOBRANCH"; shift 2 ;;
        --sourcedir ) SOURCEDIR=$(dirname $(readlink -f "$2")); shift 2 ;;
        -- ) shift; break ;;
        * ) break ;;
    esac
done

[ -n "$YOCTOBRANCH" ] || YOCTOBRANCH=("fido" "dizzy" "daisy" "dora" "master")

for YOCTOBRANCH in ${YOCTOBRANCH[@]}; do
    [ -n "$SOURCEDIR" ] || SOURCEDIR="$SCRIPTDIR/$YOCTOBRANCH/sources"
    [ -n "$BUILDDIR" ] || BUILDDIR="$SCRIPTDIR/$YOCTOBRANCH/builds"

    mkdir -p "$BUILDDIR"
    build_machines
done
exit 0
